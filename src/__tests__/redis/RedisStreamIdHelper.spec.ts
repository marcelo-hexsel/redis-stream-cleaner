import { calculateIdBefore, immediateBeforeId } from "@src/redis/RedisStreamIdHelper";

describe("RedisStreamIdHelper", () => {
  describe("immediateBeforeId", () => {
    it.each([
      { id: "1111-0", immediateBefore: "1110-999" },
      { id: "1-1", immediateBefore: "1-0" },
      { id: "123456-9", immediateBefore: "123456-8" },
    ])(
      "should return calculate and return immediate before id, respecting Redis Stream autogenerated id format - id: $id | immediateBefore: $immediateBefore",
      (testCaseParameters) => {
        expect(immediateBeforeId(testCaseParameters.id)).toBe(testCaseParameters.immediateBefore);
      }
    );
  });

  describe("calculateIdBefore", () => {
    it.each([
      { id: "665168681681-0", timeBefore: 500, idBefore: "665168681181-0" },
      { id: "888188181818-1", timeBefore: 60000, idBefore: "888188121818-0" },
      { id: "111111111111-9", timeBefore: 0, idBefore: "111111111111-9" },
      { id: "111111111111-9", timeBefore: undefined, idBefore: "111111111111-9" },
      { id: "111111111111-9", timeBefore: null, idBefore: "111111111111-9" },
    ])(
      "should return calculate and return id with before time, respecting Redis Stream autogenerated id format - id: $id | timeBefore: $timeBefore | idBefore: $idBefore",
      (testCaseParameters) => {
        expect(calculateIdBefore(testCaseParameters.id, testCaseParameters.timeBefore)).toBe(testCaseParameters.idBefore);
      }
    );
  });
});
